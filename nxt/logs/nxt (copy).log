2015-09-21 12:15:03 INFO: nxt.enableStackTraces = "true"
2015-09-21 12:15:03 INFO: nxt.enableLogTraceback = "false"
2015-09-21 12:15:03 INFO: logging enabled
2015-09-21 12:15:03 INFO: socksProxyHost not defined
2015-09-21 12:15:03 INFO: socksProxyPort not defined
2015-09-21 12:15:03 FINE: java.version = 1.8.0_60
2015-09-21 12:15:03 FINE: java.vm.version = 25.60-b23
2015-09-21 12:15:03 FINE: java.vm.name = Java HotSpot(TM) Server VM
2015-09-21 12:15:03 FINE: java.vendor = Oracle Corporation
2015-09-21 12:15:03 FINE: java.vm.vendor = Oracle Corporation
2015-09-21 12:15:03 FINE: java.home = /usr/local/java/jdk1.8.0_60/jre
2015-09-21 12:15:03 FINE: java.library.path = /usr/java/packages/lib/i386:/lib:/usr/lib
2015-09-21 12:15:03 FINE: java.class.path = classes:lib/h2-1.3.176.jar:lib/websocket-client-9.2.13.v20150730.jar:lib/websocket-server-9.2.13.v20150730.jar:lib/jetty-util-9.2.13.v20150730.jar:lib/slf4j-api-1.7.7.jar:lib/weupnp-0.1.3.jar:lib/jetty-continuation-9.2.13.v20150730.jar:lib/websocket-api-9.2.13.v20150730.jar:lib/json-simple-1.1.1.jar:lib/jetty-security-9.2.13.v20150730.jar:lib/lucene-core-3.6.2.jar:lib/jetty-http-9.2.13.v20150730.jar:lib/websocket-common-9.2.13.v20150730.jar:lib/jetty-servlet-9.2.13.v20150730.jar:lib/bcprov-jdk15on-152.jar:lib/jetty-servlets-9.2.13.v20150730.jar:lib/jetty-server-9.2.13.v20150730.jar:lib/websocket-servlet-9.2.13.v20150730.jar:lib/slf4j-jdk14-1.7.7.jar:lib/jetty-io-9.2.13.v20150730.jar:lib/servlet-api-3.1.jar:conf
2015-09-21 12:15:03 FINE: os.arch = i386
2015-09-21 12:15:03 FINE: sun.arch.data.model = 32
2015-09-21 12:15:03 FINE: os.name = Linux
2015-09-21 12:15:03 FINE: file.encoding = UTF-8
2015-09-21 12:15:03 FINE: nxt.runtime.mode = null
2015-09-21 12:15:03 FINE: availableProcessors = 4
2015-09-21 12:15:03 FINE: maxMemory = 777519104
2015-09-21 12:15:03 FINE: processId = 22750
2015-09-21 12:15:03 INFO: nxt.isTestnet = "false"
2015-09-21 12:15:03 INFO: nxt.isOffline = "false"
2015-09-21 12:15:03 INFO: nxt.maxRollback = "800"
2015-09-21 12:15:03 INFO: nxt.forgingDelay = "20"
2015-09-21 12:15:03 INFO: nxt.forgingSpeedup = "3"
2015-09-21 12:15:03 INFO: nxt.maxPrunableLifetime = "0"
2015-09-21 12:15:03 INFO: nxt.includeExpiredPrunable = "false"
2015-09-21 12:15:03 INFO: nxt.statementLogThreshold = "10000"
2015-09-21 12:15:03 INFO: nxt.transactionLogThreshold = "15000"
2015-09-21 12:15:03 INFO: nxt.transactionLogInterval = "15"
2015-09-21 12:15:03 INFO: nxt.dbCacheKB = "0"
2015-09-21 12:15:03 INFO: nxt.dbUrl not defined
2015-09-21 12:15:03 INFO: nxt.dbType = "h2"
2015-09-21 12:15:03 INFO: nxt.dbDir = "nxt_db/nxt"
2015-09-21 12:15:03 INFO: nxt.dbParams = "DB_CLOSE_ON_EXIT=FALSE;MVCC=TRUE"
2015-09-21 12:15:03 INFO: nxt.dbUsername = "sa"
2015-09-21 12:15:03 INFO: nxt.dbPassword = "{not logged}"
2015-09-21 12:15:03 INFO: nxt.maxDbConnections = "30"
2015-09-21 12:15:03 INFO: nxt.dbLoginTimeout = "70"
2015-09-21 12:15:03 INFO: nxt.dbDefaultLockTimeout = "60"
2015-09-21 12:15:03 FINE: Database jdbc url set to jdbc:h2:nxt_db/nxt;DB_CLOSE_ON_EXIT=FALSE;MVCC=TRUE;CACHE_SIZE=262144 username sa
2015-09-21 12:15:04 FINE: Database connection pool current size: 1
2015-09-21 12:15:04 INFO: Initializing an empty database
2015-09-21 12:15:04 FINE: Database connection pool current size: 2
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE TABLE IF NOT EXISTS block (db_id IDENTITY, id BIGINT NOT NULL, version INT NOT NULL, timestamp INT NOT NULL, previous_block_id BIGINT, FOREIGN KEY (previous_block_id) REFERENCES block (id) ON DELETE CASCADE, total_amount BIGINT NOT NULL, total_fee BIGINT NOT NULL, payload_length INT NOT NULL, previous_block_hash BINARY(32), cumulative_difficulty VARBINARY NOT NULL, base_target BIGINT NOT NULL, next_block_id BIGINT, FOREIGN KEY (next_block_id) REFERENCES block (id) ON DELETE SET NULL, height INT NOT NULL, generation_signature BINARY(64) NOT NULL, block_signature BINARY(64) NOT NULL, payload_hash BINARY(32) NOT NULL, generator_id BIGINT NOT NULL)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE UNIQUE INDEX IF NOT EXISTS block_id_idx ON block (id)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE TABLE IF NOT EXISTS transaction (db_id IDENTITY, id BIGINT NOT NULL, deadline SMALLINT NOT NULL, recipient_id BIGINT, amount BIGINT NOT NULL, fee BIGINT NOT NULL, full_hash BINARY(32) NOT NULL, height INT NOT NULL, block_id BIGINT NOT NULL, FOREIGN KEY (block_id) REFERENCES block (id) ON DELETE CASCADE, signature BINARY(64) NOT NULL, timestamp INT NOT NULL, type TINYINT NOT NULL, subtype TINYINT NOT NULL, sender_id BIGINT NOT NULL, block_timestamp INT NOT NULL, referenced_transaction_full_hash BINARY(32), attachment_bytes VARBINARY, version TINYINT NOT NULL, has_message BOOLEAN NOT NULL DEFAULT FALSE, has_encrypted_message BOOLEAN NOT NULL DEFAULT FALSE, has_public_key_announcement BOOLEAN NOT NULL DEFAULT FALSE, ec_block_height INT DEFAULT NULL, ec_block_id BIGINT DEFAULT NULL, has_encrypttoself_message BOOLEAN NOT NULL DEFAULT FALSE)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE UNIQUE INDEX IF NOT EXISTS transaction_id_idx ON transaction (id)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE UNIQUE INDEX IF NOT EXISTS block_height_idx ON block (height)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS block_generator_id_idx ON block (generator_id)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS transaction_sender_id_idx ON transaction (sender_id)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS transaction_recipient_id_idx ON transaction (recipient_id)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE TABLE IF NOT EXISTS peer (address VARCHAR PRIMARY KEY)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS transaction_block_timestamp_idx ON transaction (block_timestamp DESC)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE TABLE IF NOT EXISTS alias (db_id IDENTITY, id BIGINT NOT NULL, account_id BIGINT NOT NULL, alias_name VARCHAR NOT NULL, alias_name_lower VARCHAR AS LOWER (alias_name) NOT NULL, alias_uri VARCHAR NOT NULL, timestamp INT NOT NULL, height INT NOT NULL, latest BOOLEAN NOT NULL DEFAULT TRUE)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE UNIQUE INDEX IF NOT EXISTS alias_id_height_idx ON alias (id, height DESC)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS alias_account_id_idx ON alias (account_id, height DESC)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS alias_name_lower_idx ON alias (alias_name_lower)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE TABLE IF NOT EXISTS alias_offer (db_id IDENTITY, id BIGINT NOT NULL, price BIGINT NOT NULL, buyer_id BIGINT, height INT NOT NULL, latest BOOLEAN DEFAULT TRUE NOT NULL)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE UNIQUE INDEX IF NOT EXISTS alias_offer_id_height_idx ON alias_offer (id, height DESC)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE TABLE IF NOT EXISTS asset (db_id IDENTITY, id BIGINT NOT NULL, account_id BIGINT NOT NULL, name VARCHAR NOT NULL, description VARCHAR, quantity BIGINT NOT NULL, decimals TINYINT NOT NULL, height INT NOT NULL)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE UNIQUE INDEX IF NOT EXISTS asset_id_idx ON asset (id)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS asset_account_id_idx ON asset (account_id)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE TABLE IF NOT EXISTS trade (db_id IDENTITY, asset_id BIGINT NOT NULL, block_id BIGINT NOT NULL, ask_order_id BIGINT NOT NULL, bid_order_id BIGINT NOT NULL, ask_order_height INT NOT NULL, bid_order_height INT NOT NULL, seller_id BIGINT NOT NULL, buyer_id BIGINT NOT NULL, quantity BIGINT NOT NULL, price BIGINT NOT NULL, timestamp INT NOT NULL, height INT NOT NULL)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS trade_asset_id_idx ON trade (asset_id, height DESC)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS trade_seller_id_idx ON trade (seller_id, height DESC)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS trade_buyer_id_idx ON trade (buyer_id, height DESC)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE TABLE IF NOT EXISTS ask_order (db_id IDENTITY, id BIGINT NOT NULL, account_id BIGINT NOT NULL, asset_id BIGINT NOT NULL, price BIGINT NOT NULL, quantity BIGINT NOT NULL, creation_height INT NOT NULL, height INT NOT NULL, latest BOOLEAN NOT NULL DEFAULT TRUE)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE UNIQUE INDEX IF NOT EXISTS ask_order_id_height_idx ON ask_order (id, height DESC)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS ask_order_account_id_idx ON ask_order (account_id, height DESC)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS ask_order_asset_id_price_idx ON ask_order (asset_id, price)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE TABLE IF NOT EXISTS bid_order (db_id IDENTITY, id BIGINT NOT NULL, account_id BIGINT NOT NULL, asset_id BIGINT NOT NULL, price BIGINT NOT NULL, quantity BIGINT NOT NULL, creation_height INT NOT NULL, height INT NOT NULL, latest BOOLEAN NOT NULL DEFAULT TRUE)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE UNIQUE INDEX IF NOT EXISTS bid_order_id_height_idx ON bid_order (id, height DESC)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS bid_order_account_id_idx ON bid_order (account_id, height DESC)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS bid_order_asset_id_price_idx ON bid_order (asset_id, price DESC)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE TABLE IF NOT EXISTS goods (db_id IDENTITY, id BIGINT NOT NULL, seller_id BIGINT NOT NULL, name VARCHAR NOT NULL, description VARCHAR, tags VARCHAR, timestamp INT NOT NULL, quantity INT NOT NULL, price BIGINT NOT NULL, delisted BOOLEAN NOT NULL, height INT NOT NULL, latest BOOLEAN NOT NULL DEFAULT TRUE)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE UNIQUE INDEX IF NOT EXISTS goods_id_height_idx ON goods (id, height DESC)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS goods_seller_id_name_idx ON goods (seller_id, name)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS goods_timestamp_idx ON goods (timestamp DESC, height DESC)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE TABLE IF NOT EXISTS purchase (db_id IDENTITY, id BIGINT NOT NULL, buyer_id BIGINT NOT NULL, goods_id BIGINT NOT NULL, seller_id BIGINT NOT NULL, quantity INT NOT NULL, price BIGINT NOT NULL, deadline INT NOT NULL, note VARBINARY, nonce BINARY(32), timestamp INT NOT NULL, pending BOOLEAN NOT NULL, goods VARBINARY, goods_nonce BINARY(32), refund_note VARBINARY, refund_nonce BINARY(32), has_feedback_notes BOOLEAN NOT NULL DEFAULT FALSE, has_public_feedbacks BOOLEAN NOT NULL DEFAULT FALSE, discount BIGINT NOT NULL, refund BIGINT NOT NULL, height INT NOT NULL, latest BOOLEAN NOT NULL DEFAULT TRUE)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE UNIQUE INDEX IF NOT EXISTS purchase_id_height_idx ON purchase (id, height DESC)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS purchase_buyer_id_height_idx ON purchase (buyer_id, height DESC)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS purchase_seller_id_height_idx ON purchase (seller_id, height DESC)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS purchase_deadline_idx ON purchase (deadline DESC, height DESC)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE TABLE IF NOT EXISTS account (db_id IDENTITY, id BIGINT NOT NULL, creation_height INT NOT NULL, key_height INT, balance BIGINT NOT NULL, unconfirmed_balance BIGINT NOT NULL, forged_balance BIGINT NOT NULL, current_leasing_height_from INT, current_leasing_height_to INT, current_lessee_id BIGINT NULL, next_leasing_height_from INT, next_leasing_height_to INT, next_lessee_id BIGINT NULL, height INT NOT NULL, latest BOOLEAN NOT NULL DEFAULT TRUE)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE UNIQUE INDEX IF NOT EXISTS account_id_height_idx ON account (id, height DESC)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE TABLE IF NOT EXISTS account_asset (db_id IDENTITY, account_id BIGINT NOT NULL, asset_id BIGINT NOT NULL, quantity BIGINT NOT NULL, unconfirmed_quantity BIGINT NOT NULL, height INT NOT NULL, latest BOOLEAN NOT NULL DEFAULT TRUE)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE UNIQUE INDEX IF NOT EXISTS account_asset_id_height_idx ON account_asset (account_id, asset_id, height DESC)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE TABLE IF NOT EXISTS account_guaranteed_balance (db_id IDENTITY, account_id BIGINT NOT NULL, additions BIGINT NOT NULL, height INT NOT NULL)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE UNIQUE INDEX IF NOT EXISTS account_guaranteed_balance_id_height_idx ON account_guaranteed_balance (account_id, height DESC)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE TABLE IF NOT EXISTS purchase_feedback (db_id IDENTITY, id BIGINT NOT NULL, feedback_data VARBINARY NOT NULL, feedback_nonce BINARY(32) NOT NULL, height INT NOT NULL, latest BOOLEAN NOT NULL DEFAULT TRUE)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS purchase_feedback_id_height_idx ON purchase_feedback (id, height DESC)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE TABLE IF NOT EXISTS purchase_public_feedback (db_id IDENTITY, id BIGINT NOT NULL, public_feedback VARCHAR NOT NULL, height INT NOT NULL, latest BOOLEAN NOT NULL DEFAULT TRUE)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS purchase_public_feedback_id_height_idx ON purchase_public_feedback (id, height DESC)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE TABLE IF NOT EXISTS unconfirmed_transaction (db_id IDENTITY, id BIGINT NOT NULL, expiration INT NOT NULL, transaction_height INT NOT NULL, fee_per_byte BIGINT NOT NULL, transaction_bytes VARBINARY NOT NULL, height INT NOT NULL)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE UNIQUE INDEX IF NOT EXISTS unconfirmed_transaction_id_idx ON unconfirmed_transaction (id)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE TABLE IF NOT EXISTS asset_transfer (db_id IDENTITY, id BIGINT NOT NULL, asset_id BIGINT NOT NULL, sender_id BIGINT NOT NULL, recipient_id BIGINT NOT NULL, quantity BIGINT NOT NULL, timestamp INT NOT NULL, height INT NOT NULL)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE UNIQUE INDEX IF NOT EXISTS asset_transfer_id_idx ON asset_transfer (id)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS asset_transfer_asset_id_idx ON asset_transfer (asset_id, height DESC)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS asset_transfer_sender_id_idx ON asset_transfer (sender_id, height DESC)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS asset_transfer_recipient_id_idx ON asset_transfer (recipient_id, height DESC)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS account_asset_quantity_idx ON account_asset (quantity DESC)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS purchase_timestamp_idx ON purchase (timestamp DESC, id)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS ask_order_creation_idx ON ask_order (creation_height DESC)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS bid_order_creation_idx ON bid_order (creation_height DESC)
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE UNIQUE INDEX IF NOT EXISTS block_timestamp_idx ON block (timestamp DESC)
2015-09-21 12:15:04 FINE: Will apply sql:
ALTER TABLE goods ADD COLUMN IF NOT EXISTS parsed_tags ARRAY
2015-09-21 12:15:04 FINE: Will apply sql:
CREATE ALIAS IF NOT EXISTS FTL_INIT FOR "org.h2.fulltext.FullTextLucene.init"
2015-09-21 12:15:04 FINE: Will apply sql:
CALL FTL_INIT()
2015-09-21 12:15:06 FINE: Will apply sql:
CREATE TABLE IF NOT EXISTS tag (db_id IDENTITY, tag VARCHAR NOT NULL, in_stock_count INT NOT NULL, total_count INT NOT NULL, height INT NOT NULL, latest BOOLEAN NOT NULL DEFAULT TRUE)
2015-09-21 12:15:06 FINE: Will apply sql:
CREATE UNIQUE INDEX IF NOT EXISTS tag_tag_idx ON tag (tag, height DESC)
2015-09-21 12:15:06 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS tag_in_stock_count_idx ON tag (in_stock_count DESC, height DESC)
2015-09-21 12:15:06 FINE: Will apply sql:
CREATE TABLE IF NOT EXISTS currency (db_id IDENTITY, id BIGINT NOT NULL, account_id BIGINT NOT NULL, name VARCHAR NOT NULL, name_lower VARCHAR AS LOWER (name) NOT NULL, code VARCHAR NOT NULL, description VARCHAR, type INT NOT NULL, initial_supply BIGINT NOT NULL DEFAULT 0, reserve_supply BIGINT NOT NULL, max_supply BIGINT NOT NULL, creation_height INT NOT NULL, issuance_height INT NOT NULL, min_reserve_per_unit_nqt BIGINT NOT NULL, min_difficulty TINYINT NOT NULL, max_difficulty TINYINT NOT NULL, ruleset TINYINT NOT NULL, algorithm TINYINT NOT NULL, decimals TINYINT NOT NULL DEFAULT 0,height INT NOT NULL, latest BOOLEAN NOT NULL DEFAULT TRUE)
2015-09-21 12:15:06 FINE: Will apply sql:
CREATE UNIQUE INDEX IF NOT EXISTS currency_id_height_idx ON currency (id, height DESC)
2015-09-21 12:15:06 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS currency_account_id_idx ON currency (account_id)
2015-09-21 12:15:06 FINE: Will apply sql:
CREATE TABLE IF NOT EXISTS account_currency (db_id IDENTITY, account_id BIGINT NOT NULL, currency_id BIGINT NOT NULL, units BIGINT NOT NULL, unconfirmed_units BIGINT NOT NULL, height INT NOT NULL, latest BOOLEAN NOT NULL DEFAULT TRUE)
2015-09-21 12:15:06 FINE: Will apply sql:
CREATE UNIQUE INDEX IF NOT EXISTS account_currency_id_height_idx ON account_currency (account_id, currency_id, height DESC)
2015-09-21 12:15:06 FINE: Will apply sql:
CREATE TABLE IF NOT EXISTS currency_founder (db_id IDENTITY, currency_id BIGINT NOT NULL, account_id BIGINT NOT NULL, amount BIGINT NOT NULL, height INT NOT NULL, latest BOOLEAN NOT NULL DEFAULT TRUE)
2015-09-21 12:15:06 FINE: Will apply sql:
CREATE UNIQUE INDEX IF NOT EXISTS currency_founder_currency_id_idx ON currency_founder (currency_id, account_id, height DESC)
2015-09-21 12:15:06 FINE: Will apply sql:
CREATE TABLE IF NOT EXISTS currency_mint (db_id IDENTITY, currency_id BIGINT NOT NULL, account_id BIGINT NOT NULL, counter BIGINT NOT NULL, height INT NOT NULL, latest BOOLEAN NOT NULL DEFAULT TRUE)
2015-09-21 12:15:06 FINE: Will apply sql:
CREATE UNIQUE INDEX IF NOT EXISTS currency_mint_currency_id_account_id_idx ON currency_mint (currency_id, account_id, height DESC)
2015-09-21 12:15:06 FINE: Will apply sql:
CREATE TABLE IF NOT EXISTS buy_offer (db_id IDENTITY, id BIGINT NOT NULL, currency_id BIGINT NOT NULL, account_id BIGINT NOT NULL,rate BIGINT NOT NULL, unit_limit BIGINT NOT NULL, supply BIGINT NOT NULL, expiration_height INT NOT NULL,creation_height INT NOT NULL, transaction_index SMALLINT NOT NULL, height INT NOT NULL, latest BOOLEAN NOT NULL DEFAULT TRUE)
2015-09-21 12:15:06 FINE: Will apply sql:
CREATE UNIQUE INDEX IF NOT EXISTS buy_offer_id_idx ON buy_offer (id, height DESC)
2015-09-21 12:15:06 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS buy_offer_currency_id_account_id_idx ON buy_offer (currency_id, account_id, height DESC)
2015-09-21 12:15:06 FINE: Will apply sql:
CREATE TABLE IF NOT EXISTS sell_offer (db_id IDENTITY, id BIGINT NOT NULL, currency_id BIGINT NOT NULL, account_id BIGINT NOT NULL, rate BIGINT NOT NULL, unit_limit BIGINT NOT NULL, supply BIGINT NOT NULL, expiration_height INT NOT NULL, creation_height INT NOT NULL, transaction_index SMALLINT NOT NULL, height INT NOT NULL, latest BOOLEAN NOT NULL DEFAULT TRUE)
2015-09-21 12:15:06 FINE: Will apply sql:
CREATE UNIQUE INDEX IF NOT EXISTS sell_offer_id_idx ON sell_offer (id, height DESC)
2015-09-21 12:15:06 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS sell_offer_currency_id_account_id_idx ON sell_offer (currency_id, account_id, height DESC)
2015-09-21 12:15:06 FINE: Will apply sql:
CREATE TABLE IF NOT EXISTS exchange (db_id IDENTITY, transaction_id BIGINT NOT NULL, currency_id BIGINT NOT NULL, block_id BIGINT NOT NULL, offer_id BIGINT NOT NULL, seller_id BIGINT NOT NULL, buyer_id BIGINT NOT NULL, units BIGINT NOT NULL, rate BIGINT NOT NULL, timestamp INT NOT NULL, height INT NOT NULL)
2015-09-21 12:15:06 FINE: Will apply sql:
CREATE UNIQUE INDEX IF NOT EXISTS exchange_offer_idx ON exchange (transaction_id, offer_id)
2015-09-21 12:15:06 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS exchange_currency_id_idx ON exchange (currency_id, height DESC)
2015-09-21 12:15:06 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS exchange_seller_id_idx ON exchange (seller_id, height DESC)
2015-09-21 12:15:06 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS exchange_buyer_id_idx ON exchange (buyer_id, height DESC)
2015-09-21 12:15:06 FINE: Will apply sql:
CREATE TABLE IF NOT EXISTS currency_transfer (db_id IDENTITY, id BIGINT NOT NULL, currency_id BIGINT NOT NULL, sender_id BIGINT NOT NULL, recipient_id BIGINT NOT NULL, units BIGINT NOT NULL, timestamp INT NOT NULL, height INT NOT NULL)
2015-09-21 12:15:06 FINE: Will apply sql:
CREATE UNIQUE INDEX IF NOT EXISTS currency_transfer_id_idx ON currency_transfer (id)
2015-09-21 12:15:06 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS currency_transfer_currency_id_idx ON currency_transfer (currency_id, height DESC)
2015-09-21 12:15:06 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS currency_transfer_sender_id_idx ON currency_transfer (sender_id, height DESC)
2015-09-21 12:15:06 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS currency_transfer_recipient_id_idx ON currency_transfer (recipient_id, height DESC)
2015-09-21 12:15:06 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS account_currency_units_idx ON account_currency (units DESC)
2015-09-21 12:15:06 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS currency_name_idx ON currency (name_lower, height DESC)
2015-09-21 12:15:06 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS currency_code_idx ON currency (code, height DESC)
2015-09-21 12:15:06 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS buy_offer_rate_height_idx ON buy_offer (rate DESC, creation_height ASC)
2015-09-21 12:15:06 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS sell_offer_rate_height_idx ON sell_offer (rate ASC, creation_height ASC)
2015-09-21 12:15:06 FINE: Will apply sql:
DROP INDEX IF EXISTS unconfirmed_transaction_height_fee_timestamp_idx
2015-09-21 12:15:06 FINE: Will apply sql:
ALTER TABLE unconfirmed_transaction DROP COLUMN IF EXISTS timestamp
2015-09-21 12:15:06 FINE: Will apply sql:
ALTER TABLE unconfirmed_transaction ADD COLUMN IF NOT EXISTS arrival_timestamp BIGINT NOT NULL DEFAULT 0
2015-09-21 12:15:06 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS unconfirmed_transaction_height_fee_timestamp_idx ON unconfirmed_transaction (transaction_height ASC, fee_per_byte DESC, arrival_timestamp ASC)
2015-09-21 12:15:06 INFO: Deleting blockchain...
2015-09-21 12:15:06 INFO: nxt.trimDerivedTables = "true"
2015-09-21 12:15:06 INFO: nxt.numberOfForkConfirmations = "2"
2015-09-21 12:15:06 INFO: Inside of blockchainprocessorimpl()
2015-09-21 12:15:06 INFO: nxt.trimFrequency = "1000"
2015-09-21 12:15:06 INFO: nxt.disableGetMoreBlocksThread not defined, assuming false
2015-09-21 12:15:06 FINE: Average database transaction time is 0.278 seconds
2015-09-21 12:15:06 FINE: Will apply sql:
ALTER TABLE transaction ADD COLUMN IF NOT EXISTS transaction_index SMALLINT NOT NULL
2015-09-21 12:15:06 FINE: Will apply sql:
TRUNCATE TABLE ask_order
2015-09-21 12:15:06 FINE: Will apply sql:
ALTER TABLE ask_order ADD COLUMN IF NOT EXISTS transaction_index SMALLINT NOT NULL
2015-09-21 12:15:06 FINE: Will apply sql:
TRUNCATE TABLE bid_order
2015-09-21 12:15:06 FINE: Will apply sql:
ALTER TABLE bid_order ADD COLUMN IF NOT EXISTS transaction_index SMALLINT NOT NULL
2015-09-21 12:15:06 FINE: Will apply sql:
CREATE TABLE IF NOT EXISTS scan (rescan BOOLEAN NOT NULL DEFAULT FALSE, height INT NOT NULL DEFAULT 0, validate BOOLEAN NOT NULL DEFAULT FALSE)
2015-09-21 12:15:06 FINE: Will apply sql:
INSERT INTO scan (rescan, height, validate) VALUES (false, 0, false)
2015-09-21 12:15:06 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS currency_creation_height_idx ON currency (creation_height DESC)
2015-09-21 12:15:06 FINE: Will apply sql:
CREATE TABLE IF NOT EXISTS currency_supply (db_id IDENTITY, id BIGINT NOT NULL, current_supply BIGINT NOT NULL, current_reserve_per_unit_nqt BIGINT NOT NULL, height INT NOT NULL, latest BOOLEAN NOT NULL DEFAULT TRUE)
2015-09-21 12:15:06 FINE: Will apply sql:
CREATE UNIQUE INDEX IF NOT EXISTS currency_supply_id_height_idx ON currency_supply (id, height DESC)
2015-09-21 12:15:06 FINE: Will apply sql:
TRUNCATE TABLE currency
2015-09-21 12:15:06 FINE: Will apply sql:
ALTER TABLE currency DROP COLUMN IF EXISTS current_supply
2015-09-21 12:15:06 FINE: Will apply sql:
ALTER TABLE currency DROP COLUMN IF EXISTS current_reserve_per_unit_nqt
2015-09-21 12:15:06 FINE: Will apply sql:
CREATE TABLE IF NOT EXISTS public_key (db_id IDENTITY, account_id BIGINT NOT NULL, public_key BINARY(32), height INT NOT NULL, FOREIGN KEY (height) REFERENCES block (height) ON DELETE CASCADE)
2015-09-21 12:15:06 FINE: Will apply sql:
CREATE UNIQUE INDEX IF NOT EXISTS public_key_account_id_idx ON public_key (account_id)
2015-09-21 12:15:07 FINE: Will apply sql:
ALTER TABLE account DROP COLUMN IF EXISTS public_key
2015-09-21 12:15:07 FINE: Will apply sql:
ALTER TABLE block DROP COLUMN IF EXISTS generator_public_key
2015-09-21 12:15:07 FINE: Will apply sql:
ALTER TABLE transaction DROP COLUMN IF EXISTS sender_public_key
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS account_guaranteed_balance_height_idx ON account_guaranteed_balance(height)
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS asset_height_idx ON asset(height)
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS asset_transfer_height_idx ON asset_transfer(height)
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS currency_transfer_height_idx ON currency_transfer(height)
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS exchange_height_idx ON exchange(height)
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS trade_height_idx ON trade(height)
2015-09-21 12:15:07 FINE: Will apply sql:
DROP TABLE IF EXISTS poll
2015-09-21 12:15:07 FINE: Will apply sql:
DROP TABLE IF EXISTS vote
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE TABLE IF NOT EXISTS vote (db_id IDENTITY, id BIGINT NOT NULL, poll_id BIGINT NOT NULL, voter_id BIGINT NOT NULL, vote_bytes VARBINARY NOT NULL, height INT NOT NULL)
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE UNIQUE INDEX IF NOT EXISTS vote_id_idx ON vote (id)
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE UNIQUE INDEX IF NOT EXISTS vote_poll_id_idx ON vote (poll_id, voter_id)
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE TABLE IF NOT EXISTS poll (db_id IDENTITY, id BIGINT NOT NULL, account_id BIGINT NOT NULL, name VARCHAR NOT NULL, description VARCHAR, options ARRAY NOT NULL, min_num_options TINYINT, max_num_options TINYINT, min_range_value TINYINT, max_range_value TINYINT, finish_height INT NOT NULL, voting_model TINYINT NOT NULL, min_balance BIGINT, min_balance_model TINYINT, holding_id BIGINT, height INT NOT NULL)
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE TABLE IF NOT EXISTS poll_result (db_id IDENTITY, poll_id BIGINT NOT NULL, result BIGINT, weight BIGINT NOT NULL, height INT NOT NULL)
2015-09-21 12:15:07 FINE: Will apply sql:
ALTER TABLE transaction ADD COLUMN IF NOT EXISTS phased BOOLEAN NOT NULL DEFAULT FALSE
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE TABLE IF NOT EXISTS phasing_poll (db_id IDENTITY, id BIGINT NOT NULL, account_id BIGINT NOT NULL, whitelist_size TINYINT NOT NULL DEFAULT 0, finish_height INT NOT NULL, voting_model TINYINT NOT NULL, quorum BIGINT, min_balance BIGINT, holding_id BIGINT, min_balance_model TINYINT, linked_full_hashes ARRAY, hashed_secret VARBINARY, algorithm TINYINT, height INT NOT NULL)
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE TABLE IF NOT EXISTS phasing_vote (db_id IDENTITY, vote_id BIGINT NOT NULL, transaction_id BIGINT NOT NULL, voter_id BIGINT NOT NULL, height INT NOT NULL)
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE TABLE IF NOT EXISTS phasing_poll_voter (db_id IDENTITY, transaction_id BIGINT NOT NULL, voter_id BIGINT NOT NULL, height INT NOT NULL)
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS vote_height_idx ON vote(height)
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE UNIQUE INDEX IF NOT EXISTS poll_id_idx ON poll(id)
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS poll_height_idx ON poll(height)
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS poll_account_idx ON poll(account_id)
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS poll_finish_height_idx ON poll(finish_height DESC)
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS poll_result_poll_id_idx ON poll_result(poll_id)
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS poll_result_height_idx ON poll_result(height)
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE UNIQUE INDEX IF NOT EXISTS phasing_poll_id_idx ON phasing_poll(id)
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS phasing_poll_height_idx ON phasing_poll(height)
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS phasing_poll_account_id_idx ON phasing_poll(account_id, height DESC)
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS phasing_poll_holding_id_idx ON phasing_poll(holding_id, height DESC)
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE UNIQUE INDEX IF NOT EXISTS phasing_vote_transaction_voter_idx ON phasing_vote(transaction_id, voter_id)
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE UNIQUE INDEX IF NOT EXISTS phasing_poll_voter_transaction_voter_idx ON phasing_poll_voter(transaction_id, voter_id)
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE TABLE IF NOT EXISTS phasing_poll_result (db_id IDENTITY, id BIGINT NOT NULL, result BIGINT NOT NULL, approved BOOLEAN NOT NULL, height INT NOT NULL)
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE UNIQUE INDEX IF NOT EXISTS phasing_poll_result_id_idx ON phasing_poll_result(id)
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS phasing_poll_result_height_idx ON phasing_poll_result(height)
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS currency_founder_account_id_idx ON currency_founder (account_id, height DESC)
2015-09-21 12:15:07 FINE: Will apply sql:
TRUNCATE TABLE trade
2015-09-21 12:15:07 FINE: Will apply sql:
ALTER TABLE trade ADD COLUMN IF NOT EXISTS is_buy BOOLEAN NOT NULL
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS phasing_poll_voter_height_idx ON phasing_poll_voter(height)
2015-09-21 12:15:07 FINE: Will apply sql:
TRUNCATE TABLE ask_order
2015-09-21 12:15:07 FINE: Will apply sql:
ALTER TABLE ask_order ADD COLUMN IF NOT EXISTS transaction_height INT NOT NULL
2015-09-21 12:15:07 FINE: Will apply sql:
TRUNCATE TABLE bid_order
2015-09-21 12:15:07 FINE: Will apply sql:
ALTER TABLE bid_order ADD COLUMN IF NOT EXISTS transaction_height INT NOT NULL
2015-09-21 12:15:07 FINE: Will apply sql:
TRUNCATE TABLE buy_offer
2015-09-21 12:15:07 FINE: Will apply sql:
ALTER TABLE buy_offer ADD COLUMN IF NOT EXISTS transaction_height INT NOT NULL
2015-09-21 12:15:07 FINE: Will apply sql:
TRUNCATE TABLE sell_offer
2015-09-21 12:15:07 FINE: Will apply sql:
ALTER TABLE sell_offer ADD COLUMN IF NOT EXISTS transaction_height INT NOT NULL
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS phasing_vote_height_idx ON phasing_vote(height)
2015-09-21 12:15:07 FINE: Will apply sql:
DROP INDEX IF EXISTS transaction_full_hash_idx
2015-09-21 12:15:07 FINE: Will apply sql:
DROP INDEX IF EXISTS trade_ask_bid_idx
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS trade_ask_idx ON trade (ask_order_id, height DESC)
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS trade_bid_idx ON trade (bid_order_id, height DESC)
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE TABLE IF NOT EXISTS account_info (db_id IDENTITY, account_id BIGINT NOT NULL, name VARCHAR, description VARCHAR, height INT NOT NULL, latest BOOLEAN NOT NULL DEFAULT TRUE)
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE UNIQUE INDEX IF NOT EXISTS account_info_id_height_idx ON account_info (account_id, height DESC)
2015-09-21 12:15:07 FINE: Will apply sql:
ALTER TABLE account DROP COLUMN IF EXISTS name
2015-09-21 12:15:07 FINE: Will apply sql:
ALTER TABLE account DROP COLUMN IF EXISTS description
2015-09-21 12:15:07 FINE: Will apply sql:
ALTER TABLE account DROP COLUMN IF EXISTS message_pattern_regex
2015-09-21 12:15:07 FINE: Will apply sql:
ALTER TABLE account DROP COLUMN IF EXISTS message_pattern_flags
2015-09-21 12:15:07 FINE: Will apply sql:
TRUNCATE TABLE poll
2015-09-21 12:15:07 FINE: Will apply sql:
ALTER TABLE poll ADD COLUMN IF NOT EXISTS timestamp INT NOT NULL
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE TABLE IF NOT EXISTS prunable_message (db_id IDENTITY, id BIGINT NOT NULL, sender_id BIGINT NOT NULL, recipient_id BIGINT, message VARBINARY NOT NULL, is_text BOOLEAN NOT NULL, is_compressed BOOLEAN NOT NULL, is_encrypted BOOLEAN NOT NULL, timestamp INT NOT NULL, expiration INT NOT NULL, height INT NOT NULL, FOREIGN KEY (height) REFERENCES block (height) ON DELETE CASCADE)
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE UNIQUE INDEX IF NOT EXISTS prunable_message_id_idx ON prunable_message (id)
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS prunable_message_expiration_idx ON prunable_message (expiration DESC)
2015-09-21 12:15:07 FINE: Will apply sql:
ALTER TABLE transaction ADD COLUMN IF NOT EXISTS has_prunable_message BOOLEAN NOT NULL DEFAULT FALSE
2015-09-21 12:15:07 FINE: Will apply sql:
TRUNCATE TABLE unconfirmed_transaction
2015-09-21 12:15:07 FINE: Will apply sql:
ALTER TABLE unconfirmed_transaction ADD COLUMN IF NOT EXISTS prunable_json VARCHAR
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS prunable_message_sender_idx ON prunable_message (sender_id)
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS prunable_message_recipient_idx ON prunable_message (recipient_id)
2015-09-21 12:15:07 FINE: Will apply sql:
ALTER TABLE transaction ADD COLUMN IF NOT EXISTS has_prunable_encrypted_message BOOLEAN NOT NULL DEFAULT FALSE
2015-09-21 12:15:07 FINE: Will apply sql:
ALTER TABLE prunable_message ALTER COLUMN expiration RENAME TO transaction_timestamp
2015-09-21 12:15:07 FINE: Will apply sql:
UPDATE prunable_message SET transaction_timestamp = SELECT timestamp FROM transaction WHERE prunable_message.id = transaction.id
2015-09-21 12:15:07 FINE: Will apply sql:
ALTER INDEX prunable_message_expiration_idx RENAME TO prunable_message_transaction_timestamp_idx
2015-09-21 12:15:07 FINE: Will apply sql:
ALTER TABLE prunable_message ALTER COLUMN timestamp RENAME TO block_timestamp
2015-09-21 12:15:07 FINE: Will apply sql:
DROP INDEX IF EXISTS prunable_message_timestamp_idx
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS prunable_message_block_timestamp_dbid_idx ON prunable_message (block_timestamp DESC, db_id DESC)
2015-09-21 12:15:07 FINE: Will apply sql:
DROP INDEX IF EXISTS prunable_message_height_idx
2015-09-21 12:15:07 FINE: Will apply sql:
DROP INDEX IF EXISTS public_key_height_idx
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE TABLE IF NOT EXISTS tagged_data (db_id IDENTITY, id BIGINT NOT NULL, account_id BIGINT NOT NULL, name VARCHAR NOT NULL, description VARCHAR, tags VARCHAR, parsed_tags ARRAY, type VARCHAR, data VARBINARY NOT NULL, is_text BOOLEAN NOT NULL, filename VARCHAR, block_timestamp INT NOT NULL, transaction_timestamp INT NOT NULL, height INT NOT NULL, FOREIGN KEY (height) REFERENCES block (height) ON DELETE CASCADE, latest BOOLEAN NOT NULL DEFAULT TRUE)
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE UNIQUE INDEX IF NOT EXISTS tagged_data_id_height_idx ON tagged_data (id, height DESC)
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS tagged_data_expiration_idx ON tagged_data (transaction_timestamp DESC)
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS tagged_data_account_id_height_idx ON tagged_data (account_id, height DESC)
2015-09-21 12:15:07 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS tagged_data_block_timestamp_height_db_id_idx ON tagged_data (block_timestamp DESC, height DESC, db_id DESC)
2015-09-21 12:15:07 FINE: Will apply sql:
CALL FTL_CREATE_INDEX('PUBLIC', 'TAGGED_DATA', 'NAME,DESCRIPTION,TAGS')
2015-09-21 12:15:08 FINE: Will apply sql:
CREATE TABLE IF NOT EXISTS data_tag (db_id IDENTITY, tag VARCHAR NOT NULL, tag_count INT NOT NULL, height INT NOT NULL, FOREIGN KEY (height) REFERENCES block (height) ON DELETE CASCADE, latest BOOLEAN NOT NULL DEFAULT TRUE)
2015-09-21 12:15:08 FINE: Will apply sql:
CREATE UNIQUE INDEX IF NOT EXISTS data_tag_tag_height_idx ON data_tag (tag, height DESC)
2015-09-21 12:15:08 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS data_tag_count_height_idx ON data_tag (tag_count DESC, height DESC)
2015-09-21 12:15:08 FINE: Will apply sql:
CREATE TABLE IF NOT EXISTS tagged_data_timestamp (db_id IDENTITY, id BIGINT NOT NULL, timestamp INT NOT NULL, height INT NOT NULL, latest BOOLEAN NOT NULL DEFAULT TRUE)
2015-09-21 12:15:08 FINE: Will apply sql:
CREATE UNIQUE INDEX IF NOT EXISTS tagged_data_timestamp_id_height_idx ON tagged_data_timestamp (id, height DESC)
2015-09-21 12:15:08 FINE: Will apply sql:
ALTER TABLE tagged_data ADD COLUMN IF NOT EXISTS channel VARCHAR
2015-09-21 12:15:08 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS tagged_data_channel_idx ON tagged_data (channel, height DESC)
2015-09-21 12:15:08 FINE: Will apply sql:
ALTER TABLE peer ADD COLUMN IF NOT EXISTS last_updated INT
2015-09-21 12:15:08 FINE: Will apply sql:
DROP INDEX IF EXISTS account_current_lessee_id_leasing_height_idx
2015-09-21 12:15:08 FINE: Will apply sql:
TRUNCATE TABLE account
2015-09-21 12:15:08 FINE: Will apply sql:
ALTER TABLE account ADD COLUMN IF NOT EXISTS active_lessee_id BIGINT
2015-09-21 12:15:08 FINE: Will apply sql:
ALTER TABLE account DROP COLUMN IF EXISTS current_leasing_height_from
2015-09-21 12:15:08 FINE: Will apply sql:
ALTER TABLE account DROP COLUMN IF EXISTS current_leasing_height_to
2015-09-21 12:15:08 FINE: Will apply sql:
ALTER TABLE account DROP COLUMN IF EXISTS current_lessee_id
2015-09-21 12:15:08 FINE: Will apply sql:
ALTER TABLE account DROP COLUMN IF EXISTS next_leasing_height_from
2015-09-21 12:15:08 FINE: Will apply sql:
ALTER TABLE account DROP COLUMN IF EXISTS next_leasing_height_to
2015-09-21 12:15:08 FINE: Will apply sql:
ALTER TABLE account DROP COLUMN IF EXISTS next_lessee_id
2015-09-21 12:15:08 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS account_active_lessee_id_idx ON account (active_lessee_id)
2015-09-21 12:15:08 FINE: Will apply sql:
CREATE TABLE IF NOT EXISTS account_lease (db_id IDENTITY, lessor_id BIGINT NOT NULL, current_leasing_height_from INT, current_leasing_height_to INT, current_lessee_id BIGINT, next_leasing_height_from INT, next_leasing_height_to INT, next_lessee_id BIGINT, height INT NOT NULL, latest BOOLEAN NOT NULL DEFAULT TRUE)
2015-09-21 12:15:08 FINE: Will apply sql:
CREATE UNIQUE INDEX IF NOT EXISTS account_lease_lessor_id_height_idx ON account_lease (lessor_id, height DESC)
2015-09-21 12:15:09 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS account_lease_current_leasing_height_from_idx ON account_lease (current_leasing_height_from)
2015-09-21 12:15:09 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS account_lease_current_leasing_height_to_idx ON account_lease (current_leasing_height_to)
2015-09-21 12:15:09 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS account_lease_height_id_idx ON account_lease (height, lessor_id)
2015-09-21 12:15:09 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS account_asset_asset_id_idx ON account_asset (asset_id)
2015-09-21 12:15:09 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS account_currency_currency_id_idx ON account_currency (currency_id)
2015-09-21 12:15:09 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS currency_issuance_height_idx ON currency (issuance_height)
2015-09-21 12:15:09 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS unconfirmed_transaction_expiration_idx ON unconfirmed_transaction (expiration DESC)
2015-09-21 12:15:09 FINE: Will apply sql:
DROP INDEX IF EXISTS account_height_idx
2015-09-21 12:15:09 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS account_height_id_idx ON account (height, id)
2015-09-21 12:15:09 FINE: Will apply sql:
DROP INDEX IF EXISTS account_asset_height_idx
2015-09-21 12:15:09 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS account_asset_height_id_idx ON account_asset (height, account_id, asset_id)
2015-09-21 12:15:09 FINE: Will apply sql:
DROP INDEX IF EXISTS account_currency_height_idx
2015-09-21 12:15:09 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS account_currency_height_id_idx ON account_currency (height, account_id, currency_id)
2015-09-21 12:15:09 FINE: Will apply sql:
DROP INDEX IF EXISTS alias_height_idx
2015-09-21 12:15:09 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS alias_height_id_idx ON alias (height, id)
2015-09-21 12:15:09 FINE: Will apply sql:
DROP INDEX IF EXISTS alias_offer_height_idx
2015-09-21 12:15:09 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS alias_offer_height_id_idx ON alias_offer (height, id)
2015-09-21 12:15:09 FINE: Will apply sql:
DROP INDEX IF EXISTS ask_order_height_idx
2015-09-21 12:15:09 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS ask_order_height_id_idx ON ask_order (height, id)
2015-09-21 12:15:09 FINE: Will apply sql:
DROP INDEX IF EXISTS bid_order_height_idx
2015-09-21 12:15:09 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS bid_order_height_id_idx ON bid_order (height, id)
2015-09-21 12:15:09 FINE: Will apply sql:
DROP INDEX IF EXISTS buy_offer_height_idx
2015-09-21 12:15:09 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS buy_offer_height_id_idx ON buy_offer (height, id)
2015-09-21 12:15:09 FINE: Will apply sql:
DROP INDEX IF EXISTS currency_height_idx
2015-09-21 12:15:09 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS currency_height_id_idx ON currency (height, id)
2015-09-21 12:15:09 FINE: Will apply sql:
DROP INDEX IF EXISTS currency_founder_height_idx
2015-09-21 12:15:09 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS currency_founder_height_id_idx ON currency_founder (height, currency_id, account_id)
2015-09-21 12:15:09 FINE: Will apply sql:
DROP INDEX IF EXISTS currency_mint_height_idx
2015-09-21 12:15:09 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS currency_mint_height_id_idx ON currency_mint (height, currency_id, account_id)
2015-09-21 12:15:09 FINE: Will apply sql:
DROP INDEX IF EXISTS currency_supply_height_idx
2015-09-21 12:15:09 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS currency_supply_height_id_idx ON currency_supply (height, id)
2015-09-21 12:15:09 FINE: Will apply sql:
DROP INDEX IF EXISTS goods_height_idx
2015-09-21 12:15:09 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS goods_height_id_idx ON goods (height, id)
2015-09-21 12:15:09 FINE: Will apply sql:
DROP INDEX IF EXISTS purchase_height_idx
2015-09-21 12:15:09 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS purchase_height_id_idx ON purchase (height, id)
2015-09-21 12:15:09 FINE: Will apply sql:
DROP INDEX IF EXISTS purchase_feedback_height_idx
2015-09-21 12:15:09 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS purchase_feedback_height_id_idx ON purchase_feedback (height, id)
2015-09-21 12:15:09 FINE: Will apply sql:
DROP INDEX IF EXISTS purchase_public_feedback_height_idx
2015-09-21 12:15:09 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS purchase_public_feedback_height_id_idx ON purchase_public_feedback (height, id)
2015-09-21 12:15:09 FINE: Will apply sql:
DROP INDEX IF EXISTS sell_offer_height_idx
2015-09-21 12:15:09 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS sell_offer_height_id_idx ON sell_offer (height, id)
2015-09-21 12:15:09 FINE: Will apply sql:
DROP INDEX IF EXISTS tag_height_idx
2015-09-21 12:15:09 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS tag_height_tag_idx ON tag (height, tag)
2015-09-21 12:15:09 FINE: Will apply sql:
DROP INDEX IF EXISTS account_info_height_idx
2015-09-21 12:15:09 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS account_info_height_id_idx ON account_info (height, account_id)
2015-09-21 12:15:09 FINE: Will apply sql:
DROP INDEX IF EXISTS tagged_data_timestamp_height_idx
2015-09-21 12:15:09 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS tagged_data_timestamp_height_id_idx ON tagged_data_timestamp (height, id)
2015-09-21 12:15:09 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS trade_height_db_id_idx ON trade (height DESC, db_id DESC)
2015-09-21 12:15:09 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS asset_height_db_id_idx ON asset (height DESC, db_id DESC)
2015-09-21 12:15:09 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS exchange_height_db_id_idx ON exchange (height DESC, db_id DESC)
2015-09-21 12:15:09 FINE: Will apply sql:
CREATE TABLE IF NOT EXISTS exchange_request (db_id IDENTITY, id BIGINT NOT NULL, account_id BIGINT NOT NULL, currency_id BIGINT NOT NULL, units BIGINT NOT NULL, rate BIGINT NOT NULL, is_buy BOOLEAN NOT NULL, timestamp INT NOT NULL, height INT NOT NULL)
2015-09-21 12:15:09 FINE: Will apply sql:
CREATE UNIQUE INDEX IF NOT EXISTS exchange_request_id_idx ON exchange_request (id)
2015-09-21 12:15:09 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS exchange_request_account_currency_idx ON exchange_request (account_id, currency_id, height DESC)
2015-09-21 12:15:09 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS exchange_request_currency_idx ON exchange_request (currency_id, height DESC)
2015-09-21 12:15:09 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS exchange_request_height_db_id_idx ON exchange_request (height DESC, db_id DESC)
2015-09-21 12:15:09 FINE: Will apply sql:
CREATE INDEX IF NOT EXISTS exchange_request_height_idx ON exchange_request (height)
2015-09-21 12:15:09 INFO: Inside of schedulescan()
2015-09-21 12:15:09 FINE: Scheduled scan starting from height 0
2015-09-21 12:15:09 INFO: nxt.enableTransactionRebroadcasting = "true"
2015-09-21 12:15:09 INFO: nxt.testUnconfirmedTransactions not defined, assuming false
2015-09-21 12:15:09 INFO: nxt.maxUnconfirmedTransactions = "2000"
2015-09-21 12:15:09 INFO: Inside of registerderivedtable()
2015-09-21 12:15:09 INFO: nxt.disableProcessTransactionsThread not defined, assuming false
2015-09-21 12:15:09 INFO: nxt.disableRemoveUnconfirmedTransactionsThread not defined, assuming false
2015-09-21 12:15:09 INFO: nxt.disableRebroadcastTransactionsThread not defined, assuming false
2015-09-21 12:15:09 INFO: Inside of registerderivedtable()
2015-09-21 12:15:09 INFO: Inside of registerderivedtable()
2015-09-21 12:15:09 INFO: Inside of registerderivedtable()
2015-09-21 12:15:09 INFO: Inside of registerderivedtable()
2015-09-21 12:15:09 INFO: Inside of registerderivedtable()
2015-09-21 12:15:09 INFO: Inside of registerderivedtable()
2015-09-21 12:15:09 INFO: Inside of registerderivedtable()
2015-09-21 12:15:09 INFO: Inside of addlistener()
2015-09-21 12:15:09 INFO: Inside of registerderivedtable()
2015-09-21 12:15:09 INFO: Inside of registerderivedtable()
2015-09-21 12:15:09 INFO: Inside of registerderivedtable()
2015-09-21 12:15:09 INFO: Inside of addlistener()
2015-09-21 12:15:09 INFO: Inside of registerderivedtable()
2015-09-21 12:15:09 INFO: Inside of registerderivedtable()
2015-09-21 12:15:09 INFO: Inside of registerderivedtable()
2015-09-21 12:15:09 INFO: Inside of registerderivedtable()
2015-09-21 12:15:09 INFO: Inside of registerderivedtable()
2015-09-21 12:15:09 INFO: Inside of registerderivedtable()
2015-09-21 12:15:09 INFO: Inside of registerderivedtable()
2015-09-21 12:15:09 INFO: nxt.processPolls = "true"
2015-09-21 12:15:09 INFO: Inside of registerderivedtable()
2015-09-21 12:15:09 INFO: Inside of registerderivedtable()
2015-09-21 12:15:09 INFO: Inside of addlistener()
2015-09-21 12:15:09 INFO: Inside of registerderivedtable()
2015-09-21 12:15:09 INFO: Inside of registerderivedtable()
2015-09-21 12:15:09 INFO: Inside of registerderivedtable()
2015-09-21 12:15:09 INFO: Inside of registerderivedtable()
2015-09-21 12:15:09 INFO: Inside of registerderivedtable()
2015-09-21 12:15:09 INFO: Inside of registerderivedtable()
2015-09-21 12:15:09 INFO: Inside of registerderivedtable()
2015-09-21 12:15:09 INFO: Inside of registerderivedtable()
2015-09-21 12:15:09 INFO: Inside of registerderivedtable()
2015-09-21 12:15:09 INFO: Inside of addlistener()
2015-09-21 12:15:09 INFO: Inside of addlistener()
2015-09-21 12:15:09 INFO: Inside of registerderivedtable()
2015-09-21 12:15:09 INFO: Inside of registerderivedtable()
2015-09-21 12:15:09 INFO: Inside of registerderivedtable()
2015-09-21 12:15:09 INFO: Inside of registerderivedtable()
2015-09-21 12:15:09 INFO: Inside of registerderivedtable()
2015-09-21 12:15:10 INFO: Inside of registerderivedtable()
2015-09-21 12:15:10 INFO: Inside of registerderivedtable()
2015-09-21 12:15:10 INFO: Inside of registerderivedtable()
2015-09-21 12:15:10 INFO: Inside of registerderivedtable()
2015-09-21 12:15:10 INFO: Inside of registerderivedtable()
2015-09-21 12:15:10 INFO: Inside of registerderivedtable()
2015-09-21 12:15:10 INFO: nxt.myPlatform = "PC"
2015-09-21 12:15:10 INFO: nxt.myAddress not defined
2015-09-21 12:15:10 INFO: nxt.peerServerPort = "7874"
2015-09-21 12:15:10 INFO: nxt.shareMyAddress = "true"
2015-09-21 12:15:10 INFO: nxt.enablePeerUPnP = "true"
2015-09-21 12:15:10 INFO: nxt.myHallmark not defined
2015-09-21 12:15:10 FINE: My peer info:
{"application":"NRS","version":"1.5.15","platform":"PC","shareAddress":true}
2015-09-21 12:15:10 INFO: nxt.defaultPeers = "85.214.222.82; 89.133.34.109; 167.114.113.194; 37.139.5.199; 104.193.41.253; 128.171.159.20; 79.220.77.13; 195.154.127.172; nxt.cryonet.de; 37.59.115.207; 85.10.201.15; 158.69.33.172; 78.47.58.62; 144.76.3.50; 185.69.54.128; 5.9.102.210; 192.99.35.133; nxtx.ru; 95.24.20.94; 192.99.102.1; nxt4.y.cz; 85.25.198.120; 89.212.19.49; 89.250.243.166; nxt01.now.im; 89.72.57.246; 151.80.162.72:3001; 46.28.206.40; girona2nxtgig.ddns.net; 167.114.113.250; 31.40.93.102; 174.140.167.239; gunka.szn.dk; 162.243.242.8; 99.227.137.145; dilnu.szn.dk; 84.242.91.139; 192.187.97.131:12211; single-chat.at; 69.163.40.132; 82.165.145.37; beor.homeip.net; 167.114.113.249; 45.43.221.5:21518; 167.114.113.246; 80.153.101.190; 90.26.130.179; 84.246.228.249; 78.47.115.250; 119.81.199.93; 119.81.199.91; nxt.sx; 188.243.4.139; 46.109.188.166; 192.3.158.120; 91.202.253.240; palolnxtgig.ddns.net; 46.28.111.249; 80.150.243.95; 80.150.243.96; 178.32.174.163; 80.150.243.97; pakisnxt.no-ip.org; 80.150.243.98; 85.25.43.169; 80.150.243.99; 80.150.243.12; 198.46.193.111; 80.150.243.13; node0.forgenxt.com; 52.28.97.208; 82.154.27.134; 167.114.96.222; nxt.scryptmh.eu; 46.108.156.144; 62.75.143.120; 176.9.0.19; 176.97.2.141; 5.9.105.170; silvanoip.dhcp.biz; 95.215.44.229; home.kaerner.net; 89.248.160.239; 162.243.122.251; 178.15.99.67; strat2.hd.free.fr; 104.131.254.22; 62.194.6.113; node-dua.miasik.tk; nxt.ydns.eu; 62.195.89.177; 198.199.95.15; 80.86.92.70; 216.8.180.222; 87.139.122.48; nxt1.y.cz; 185.35.10.20; 113.106.85.172; 87.139.122.157; 185.26.126.108; brangdon.duckdns.org; 23.95.37.134; 89.248.160.237; ct.flipflop.mooo.com; 185.69.54.136; nxt.hopto.org; 108.61.184.187; 131.72.136.251; 45.63.58.212; 95.85.31.45; 176.94.115.161; 167.114.113.25; 167.114.113.27; nxtcoin.no-ip.org; 91.239.69.78; 89.248.160.241; 89.248.160.240; 162.243.145.83; 89.248.160.242; 89.248.160.245; 167.114.113.201; 77.88.208.12; 24.23.120.252; wallext.de; 178.33.203.157; nxt.noip.me; nxt.miasik.tk; 176.31.167.127; 66.30.204.105; 178.18.83.36; bug.airdns.org; 190.10.9.166; megaman.thican.net; 54.213.222.141; humanoide.thican.net; 217.26.24.27; 167.114.71.191; 52.0.72.67; 104.130.7.74; 107.170.164.129; nxt5.y.cz; 192.99.68.108; scripterron.dyndns.biz; scripterron.dyndns.org; 188.35.156.10; 71.72.248.46; 128.199.189.226; 178.62.175.175; 5.9.155.145; 95.143.216.60; 216.119.150.238; 136.243.5.70; 212.232.49.28; 84.253.125.186;"
2015-09-21 12:15:10 INFO: nxt.wellKnownPeers not defined
2015-09-21 12:15:10 INFO: nxt.knownBlacklistedPeers not defined
2015-09-21 12:15:10 INFO: nxt.maxNumberOfInboundConnections = "250"
2015-09-21 12:15:10 INFO: nxt.maxNumberOfOutboundConnections = "50"
2015-09-21 12:15:10 INFO: nxt.maxNumberOfConnectedPublicPeers = "20"
2015-09-21 12:15:10 INFO: nxt.maxNumberOfKnownPeers = "2000"
2015-09-21 12:15:10 INFO: nxt.minNumberOfKnownPeers = "1000"
2015-09-21 12:15:10 INFO: nxt.connectTimeout = "10000"
2015-09-21 12:15:10 INFO: nxt.readTimeout = "20000"
2015-09-21 12:15:10 INFO: nxt.enableHallmarkProtection = "true"
2015-09-21 12:15:10 INFO: nxt.pushThreshold = "0"
2015-09-21 12:15:10 INFO: nxt.pullThreshold = "0"
2015-09-21 12:15:10 INFO: nxt.useWebSockets = "true"
2015-09-21 12:15:10 INFO: nxt.webSocketIdleTimeout = "900000"
2015-09-21 12:15:10 INFO: nxt.blacklistingPeriod = "600000"
2015-09-21 12:15:10 INFO: nxt.communicationLoggingMask = "0"
2015-09-21 12:15:10 INFO: nxt.sendToPeersLimit = "10"
2015-09-21 12:15:10 INFO: nxt.usePeersDb = "true"
2015-09-21 12:15:10 INFO: nxt.savePeers = "true"
2015-09-21 12:15:10 INFO: nxt.getMorePeers = "true"
2015-09-21 12:15:10 INFO: nxt.cjdnsOnly = "false"
2015-09-21 12:15:10 INFO: nxt.ignorePeerAnnouncedAddress = "false"
2015-09-21 12:15:10 INFO: nxt.disablePeerConnectingThread not defined, assuming false
2015-09-21 12:15:10 INFO: nxt.disablePeerUnBlacklistingThread not defined, assuming false
2015-09-21 12:15:10 INFO: nxt.disableGetMorePeersThread not defined, assuming false
2015-09-21 12:15:10 INFO: nxt.peerServerHost = "0.0.0.0"
2015-09-21 12:15:10 INFO: nxt.peerServerIdleTimeout = "30000"
2015-09-21 12:15:10 INFO: nxt.enablePeerServerGZIPFilter = "true"
2015-09-21 12:15:10 INFO: nxt.enablePeerServerDoSFilter = "true"
2015-09-21 12:15:10 INFO: nxt.peerServerDoSFilter.maxRequestsPerSec = "30"
2015-09-21 12:15:10 INFO: nxt.peerServerDoSFilter.delayMs = "1000"
2015-09-21 12:15:10 INFO: nxt.peerServerDoSFilter.maxRequestMs = "300000"
2015-09-21 12:15:10 INFO: nxt.enableFakeForging not defined, assuming false
2015-09-21 12:15:10 INFO: nxt.disableGenerateBlocksThread not defined, assuming false
2015-09-21 12:15:10 INFO: nxt.adminPassword not defined
2015-09-21 12:15:10 INFO: nxt.maxAPIRecords = "100"
2015-09-21 12:15:10 INFO: nxt.enableAPIUPnP = "false"
2015-09-21 12:15:10 INFO: nxt.allowedBotHosts = "127.0.0.1; localhost; [0:0:0:0:0:0:0:1];"
2015-09-21 12:15:10 INFO: nxt.enableAPIServer = "true"
2015-09-21 12:15:10 INFO: nxt.apiServerPort = "7876"
2015-09-21 12:15:11 INFO: nxt.apiServerSSLPort = "7876"
2015-09-21 12:15:11 INFO: nxt.apiServerHost = "127.0.0.1"
2015-09-21 12:15:11 INFO: nxt.disableAdminPassword = "false"
2015-09-21 12:15:11 INFO: nxt.apiSSL = "false"
2015-09-21 12:15:11 INFO: nxt.apiServerIdleTimeout = "30000"
2015-09-21 12:15:11 INFO: API server using HTTP port 7876
2015-09-21 12:15:11 INFO: nxt.apiResourceBase = "html/ui"
2015-09-21 12:15:11 INFO: nxt.apiWelcomeFile = "index.html"
2015-09-21 12:15:11 INFO: nxt.javadocResourceBase = "html/doc"
2015-09-21 12:15:11 INFO: nxt.maxUploadFileSize not defined or not numeric, using default value 0
2015-09-21 12:15:11 INFO: nxt.enableAPIServerGZIPFilter = "false"
2015-09-21 12:15:11 INFO: nxt.apiServerCORS = "false"
2015-09-21 12:15:11 INFO: nxt.allowedUserHosts = "127.0.0.1; localhost; [0:0:0:0:0:0:0:1];"
2015-09-21 12:15:11 INFO: nxt.enableUIServer = "false"
2015-09-21 12:15:11 INFO: User interface server not enabled
2015-09-21 12:15:11 INFO: nxt.debugTraceQuote = """
2015-09-21 12:15:11 INFO: nxt.debugTraceSeparator = "	"
2015-09-21 12:15:11 INFO: nxt.debugLogUnconfirmed = "false"
2015-09-21 12:15:11 INFO: nxt.debugTraceAccounts not defined
2015-09-21 12:15:11 INFO: nxt.debugTraceLog = "nxt-trace.csv"
2015-09-21 12:15:11 FINE: Running 2 tasks...
2015-09-21 12:15:11 INFO: Inside of addgenesisblock()
2015-09-21 12:15:11 INFO: Genesis block not in database, starting from scratch
2015-09-21 12:15:11 FINE: Loading known peers from the database...
2015-09-21 12:15:11 INFO: transaction variable created
2015-09-21 12:15:11 INFO: nxt.enablePeerServerGZIPFilter = "true"
2015-09-21 12:15:13 INFO: Inside of addblock()
2015-09-21 12:15:13 INFO: Addgenesisblock function ended
2015-09-21 12:15:13 INFO: Inside of scan()
2015-09-21 12:15:13 INFO: Inside of scan()
2015-09-21 12:15:13 INFO: Inside of schedulescan()
2015-09-21 12:15:13 FINE: Scheduled scan starting from height 0
2015-09-21 12:15:13 INFO: Scanning blockchain starting from height 0...
2015-09-21 12:15:13 FINE: Dropping all full text search indexes
2015-09-21 12:15:13 FINE: Rolled back derived tables
2015-09-21 12:15:13 INFO: Inside of validatephasedtransactions()
2015-09-21 12:15:13 INFO: Inside of accept()
2015-09-21 12:15:13 INFO: processed block 0
2015-09-21 12:15:13 INFO: Inside of dotrimderivedtables()
2015-09-21 12:15:13 FINE: Creating search index on account_info (name,description)
2015-09-21 12:15:13 FINE: Creating search index on asset (name,description)
2015-09-21 12:15:13 FINE: Creating search index on goods (name,description,tags)
2015-09-21 12:15:13 FINE: Creating search index on poll (name,description)
2015-09-21 12:15:13 FINE: Creating search index on currency (code,name,description)
2015-09-21 12:15:13 FINE: Creating search index on tagged_data (name,description,tags)
2015-09-21 12:15:14 INFO: ...done at height 0
2015-09-21 12:15:14 FINE: Running 2 final tasks...
2015-09-21 12:15:14 INFO: Looking for UPnP gateway device...
2015-09-21 12:15:14 INFO: Started API server at 127.0.0.1:7876
2015-09-21 12:15:14 FINE: UPnP gateway device found on 192.168.0.125
2015-09-21 12:15:14 FINE: Using UPnP gateway device on 192.168.0.125
2015-09-21 12:15:14 INFO: External IP address is 106.243.122.103
2015-09-21 12:15:14 FINE: Mapped port [106.243.122.103]:7874
2015-09-21 12:15:14 INFO: Started peer networking server at 0.0.0.0:7874
2015-09-21 12:15:14 FINE: Starting 8 background jobs
2015-09-21 12:15:14 FINE: Starting 2 delayed tasks
2015-09-21 12:15:14 INFO: Initialization took 11 seconds
2015-09-21 12:15:14 INFO: Nxt server 1.5.15 started successfully.
2015-09-21 12:15:14 INFO: Copyright © 2013-2015 The Nxt Core Developers.
2015-09-21 12:15:14 INFO: Distributed under GPLv2, with ABSOLUTELY NO WARRANTY.
2015-09-21 12:15:14 INFO: Client UI is at http://localhost:7876/index.html
2015-09-21 12:15:14 INFO: Inside of run() loop
2015-09-21 12:15:14 INFO: Inside of downloadpeer()
2015-09-21 12:15:14 FINE: Failed to resolve peer address: nxt.hopto.org
2015-09-21 12:15:14 FINE: Known peers: 153
2015-09-21 12:15:15 FINE: Peer 119.81.199.93 version null returned error: {"error":"Maximum number of inbound connections exceeded"}, request was: {"protocol":1,"application":"NRS","requestType":"getInfo","version":"1.5.15","platform":"PC","shareAddress":true}, disconnecting
2015-09-21 12:15:15 INFO: Inside of run() loop
2015-09-21 12:15:15 INFO: Inside of downloadpeer()
2015-09-21 12:15:16 INFO: Inside of run() loop
2015-09-21 12:15:16 INFO: Inside of downloadpeer()
2015-09-21 12:15:16 INFO: Inside of getcommonmilestoneblockid()
2015-09-21 12:15:17 INFO: nxt.apiServerEnforcePOST = "true"
2015-09-21 12:15:18 INFO: Inside of getminrollbackheight()
2015-09-21 12:15:29 INFO: Inside of getblockidsaftercommon()
2015-09-21 12:15:31 INFO: Inside of run() loop
2015-09-21 12:15:31 INFO: Inside of downloadpeer()
2015-09-21 12:15:31 INFO: Inside of getcommonmilestoneblockid()
2015-09-21 12:15:47 INFO: Inside of getminrollbackheight()
2015-09-21 12:15:49 INFO: Inside of getblockidsaftercommon()
2015-09-21 12:15:51 INFO: Inside of run() loop
2015-09-21 12:15:51 INFO: Inside of downloadpeer()
2015-09-21 12:15:51 INFO: Inside of getcommonmilestoneblockid()
2015-09-21 12:16:06 INFO: Inside of getblockidsaftercommon()
2015-09-21 12:16:08 INFO: Inside of run() loop
2015-09-21 12:16:08 INFO: Inside of downloadpeer()
2015-09-21 12:16:08 INFO: Inside of getcommonmilestoneblockid()
2015-09-21 12:16:17 INFO: Inside of getminrollbackheight()
2015-09-21 12:16:23 INFO: Inside of getblockidsaftercommon()
2015-09-21 12:16:25 INFO: Inside of run() loop
2015-09-21 12:16:25 INFO: Inside of downloadpeer()
2015-09-21 12:16:25 INFO: Inside of getcommonmilestoneblockid()
2015-09-21 12:16:40 INFO: Inside of getblockidsaftercommon()
2015-09-21 12:16:42 INFO: Inside of run() loop
2015-09-21 12:16:42 INFO: Inside of downloadpeer()
2015-09-21 12:16:42 INFO: Inside of getcommonmilestoneblockid()
2015-09-21 12:16:47 INFO: Inside of getminrollbackheight()
2015-09-21 12:16:58 INFO: Inside of getblockidsaftercommon()
2015-09-21 12:17:00 INFO: Inside of run() loop
2015-09-21 12:17:00 INFO: Inside of downloadpeer()
2015-09-21 12:17:00 INFO: Inside of getcommonmilestoneblockid()
2015-09-21 12:17:17 INFO: Inside of getminrollbackheight()
2015-09-21 12:17:25 INFO: Inside of getblockidsaftercommon()
2015-09-21 12:17:28 INFO: Inside of run() loop
2015-09-21 12:17:28 INFO: Inside of downloadpeer()
2015-09-21 12:17:28 INFO: Inside of getcommonmilestoneblockid()
2015-09-21 12:17:47 INFO: Inside of getminrollbackheight()
2015-09-21 12:17:50 INFO: Inside of getblockidsaftercommon()
2015-09-21 12:17:52 INFO: Inside of run() loop
2015-09-21 12:17:52 INFO: Inside of downloadpeer()
2015-09-21 12:17:52 INFO: Inside of getcommonmilestoneblockid()
2015-09-21 12:18:10 INFO: Inside of getblockidsaftercommon()
2015-09-21 12:18:12 INFO: Inside of run() loop
2015-09-21 12:18:12 INFO: Inside of downloadpeer()
2015-09-21 12:18:12 INFO: Inside of getcommonmilestoneblockid()
2015-09-21 12:18:17 INFO: Inside of getminrollbackheight()
2015-09-21 12:18:23 INFO: Inside of getblockidsaftercommon()
2015-09-21 12:18:25 INFO: Inside of run() loop
2015-09-21 12:18:25 INFO: Inside of downloadpeer()
2015-09-21 12:18:25 INFO: Inside of getcommonmilestoneblockid()
2015-09-21 12:18:39 INFO: Inside of getblockidsaftercommon()
2015-09-21 12:18:41 INFO: Inside of run() loop
2015-09-21 12:18:41 INFO: Inside of downloadpeer()
2015-09-21 12:18:41 INFO: Inside of getcommonmilestoneblockid()
2015-09-21 12:18:47 INFO: Inside of getminrollbackheight()
2015-09-21 12:19:00 INFO: Inside of getblockidsaftercommon()
2015-09-21 12:19:01 INFO: Inside of run() loop
2015-09-21 12:19:01 INFO: Inside of downloadpeer()
2015-09-21 12:19:02 INFO: Inside of getcommonmilestoneblockid()
2015-09-21 12:19:03 FINE: Connect: peer 80.86.92.70 has new announced address nxt.cybermailing.com, old is 80.86.92.70
2015-09-21 12:19:03 FINE: Removing old announced address 80.86.92.70 for peer 80.86.92.70
2015-09-21 12:19:17 INFO: Inside of getminrollbackheight()
2015-09-21 12:19:19 INFO: Inside of getblockidsaftercommon()
2015-09-21 12:19:20 INFO: Inside of run() loop
2015-09-21 12:19:20 INFO: Inside of downloadpeer()
2015-09-21 12:19:21 INFO: Inside of getcommonmilestoneblockid()
2015-09-21 12:19:37 INFO: Inside of getblockidsaftercommon()
2015-09-21 12:19:39 INFO: Inside of run() loop
2015-09-21 12:19:39 INFO: Inside of downloadpeer()
2015-09-21 12:19:39 INFO: Inside of getcommonmilestoneblockid()
2015-09-21 12:19:46 FINE: Peer 119.81.199.91 version null returned error: {"error":"Maximum number of inbound connections exceeded"}, request was: {"protocol":1,"application":"NRS","requestType":"getInfo","version":"1.5.15","platform":"PC","shareAddress":true}, disconnecting
2015-09-21 12:19:47 FINE: Peer 89.250.240.60 version null returned error: {"cause":"Old version: 1.2.8","error":"Your peer is blacklisted"}, request was: {"protocol":1,"application":"NRS","requestType":"getInfo","version":"1.5.15","platform":"PC","shareAddress":true}, disconnecting
2015-09-21 12:19:47 INFO: Inside of getminrollbackheight()
